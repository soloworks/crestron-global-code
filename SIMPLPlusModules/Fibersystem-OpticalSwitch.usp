/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/  
DIGITAL_INPUT POLL;
ANALOG_INPUT _SKIP_;
ANALOG_INPUT SOURCE;
STRING_INPUT _SKIP_;
STRING_INPUT HOST_IP[50];


DIGITAL_OUTPUT pollReset;
DIGITAL_OUTPUT connActive;
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT  sourceActive;



/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT ipDevice[1024];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER HOST_PORT;
// LONG_INTEGER
// SIGN	ED_INTEGER
// SIGNED_LONG_INTEGER
STRING Tx[2000];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function fnTryConnection(){
	INTEGER state;
	IF(HOST_PORT = 0){HOST_PORT = 80;}
	IF(FIND("\n\n",Tx,1)){
		state = SOCKETCONNECTCLIENT(ipDevice, HOST_IP, 80, 0);
	}
	PULSE(1,pollReset);
}
Function fnEndConnection(){
	INTEGER state;
	state = SocketDisconnectClient(ipDevice);
}
Function fnGET(STRING path){
	
	IF(HOST_IP != ""){   
		MAKESTRING(Tx,"%sGET %s",Tx,path);	
		MAKESTRING(Tx,"%s HTTP/1.1\x0D\x0A",Tx);
		MAKESTRING(Tx,"%sHost: %s\x0D\x0A",Tx,HOST_IP);
		MAKESTRING(Tx,"%s\x0D\x0A",Tx);	
		TRACE("GET=%s",Tx);

		fnTryConnection();
	}
}

Function fnPoll(){
	STRING path[500];
	MAKESTRING(path,"/rest/fosw/get_port");
	fnGET(path);	
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
SOCKETCONNECT ipDevice{
	STRING toSend[250];
	TRACE("ipDevice Connected");	
	toSend = REMOVE("\x0D\x0A\x0D\x0A",Tx);
	TRACE("SEND=%s",toSend);
    SOCKETSEND(ipDevice,toSend);
	WAIT(250, TimeOut){SocketDisconnectClient(ipDevice);}
}
SOCKETDISCONNECT ipDevice{
	STRING TEMP[100];
	// TRACE("ipDevice DisConnected");

    // Strip HTTP/1.1
	TEMP = REMOVE(" ",ipDevice.SocketRxBuf);

	// Check status code
	IF(REMOVE(" ",ipDevice.SocketRxBuf) = "200 "){
		PULSE(1,connActive);
	}
               
    // Strip Headers
	TEMP = REMOVE("\x0D\x0A\x0D\x0A",ipDevice.SocketRxBuf);	

	// Clear Buffer
	CLEARBUFFER(ipDevice.SocketRxBuf);

	// Cancel Timeout
	CancelWait(TimeOut);

	// Do more if more to do
	fnTryConnection();
}
SOCKETRECEIVE ipDevice{
	// TRACE("ipDevice Data Received");
	// TRACE("%s",ipDevice.SocketRxBuf);
}


PUSH POLL{                 
	fnPoll();
}


CHANGE HOST_IP{
   	fnPoll();
}

CHANGE SOURCE{
	STRING path[500];
	MAKESTRING(path,"/rest/fosw/set_port?port=%d",SOURCE);
	fnGET(path);

	sourceActive = SOURCE;
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}



