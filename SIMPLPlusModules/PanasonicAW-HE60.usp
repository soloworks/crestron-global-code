/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 15
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT POLL;
DIGITAL_INPUT _SKIP_, Power_On, Power_Off;
DIGITAL_INPUT _SKIP_, Move_Up, Move_Down, Move_Left, Move_Right;
DIGITAL_INPUT _SKIP_, Zoom_In, Zoom_Out, _SKIP_, Focus_Far, Focus_Near;
DIGITAL_INPUT _SKIP_, PresetRecall[4];
DIGITAL_INPUT _SKIP_, PresetSave[4];
// ANALOG_INPUT
STRING_INPUT _SKIP_; 
STRING_INPUT AUTH_IP[50]; 
STRING_INPUT HOST_IP[15];
// BUFFER_INPUT 

DIGITAL_OUTPUT pollReset;
DIGITAL_OUTPUT connActive;
DIGITAL_OUTPUT _SKIP_, Preset_FB[4];

// ANALOG_OUTPUT 
// STRING_OUTPUT

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT ipCamera[2000];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER ;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING Tx[500];


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function Send(STRING command){
	IF(HOST_IP != ""){ 
		MAKESTRING(Tx,"GET /cgi-bin/aw_ptz?cmd=%s&res=1 HTTP/1.1\x0D\x0A",command);
		MAKESTRING(Tx,"%sHost: %s\x0D\x0A",Tx,HOST_IP);
		MAKESTRING(Tx,"%sConnection: Close\x0D\x0A",Tx);
		MAKESTRING(Tx,"%sAuthorization: Basic %s\x0D\x0A\x0D\x0A",Tx,AUTH_IP);
                    
		// TRACE("Queue: %s",command);
		SocketConnectClient(ipCamera, HOST_IP, 80, 0); 	
	}
	PULSE(1,pollReset);

}
 
Function fnPoll(){ 
	SIGNED_INTEGER error;
	IF(HOST_IP != ""){ 
		MAKESTRING(Tx,"GET /live/camdata.html HTTP/1.1\x0D\x0A");	
		MAKESTRING(Tx,"%sHost: %s\x0D\x0A",Tx,HOST_IP);
		MAKESTRING(Tx,"%sConnection: Close\x0D\x0A",Tx);
		MAKESTRING(Tx,"%sAuthorization: Basic %s\x0D\x0A\x0D\x0A",Tx,AUTH_IP);
		// TRACE("ipCamera Poll: Open Connection"); 
		error = SocketConnectClient(ipCamera, HOST_IP, 80, 0);
		// TRACE("ipCamera Poll: Error %d",error);
	}	
	PULSE(1,pollReset);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE HOST_IP{
	fnPoll();
}

PUSH Power_On
{
	Send("#O1");
}

PUSH Power_Off
{
	Send("#O0");
}

PUSH Move_Up
{
	Send("#T65");
}

RELEASE Move_Up
{             
	delay(20);
	Send("#T50");
}

PUSH Move_Down
{
	Send("#T35");
}

RELEASE Move_Down
{
	delay(10);
	Send("#T50");
}

PUSH Move_Left
{
	Send("#P35");
}

RELEASE Move_Left
{
	delay(10);
	Send("#P50");
}

PUSH Move_Right
{
	Send("#P65");
}

RELEASE Move_Right
{
	delay(10);
	Send("#P50");
}

PUSH Zoom_In
{
	Send("#Z80");
}

RELEASE Zoom_In
{
	delay(10);
	Send("#Z50");
}

PUSH Zoom_Out
{
	Send("#Z20");
}

RELEASE Zoom_Out
{
	delay(10);
	Send("#Z50");
}

PUSH Focus_Far
{
	Send("#F80");
}

RELEASE Focus_Far
{
	delay(10);
	Send("#F50");
}

PUSH Focus_Near
{
	Send("#F20");
}

RELEASE Focus_Near
{
	delay(10);
	Send("#F50");
}

RELEASE PresetRecall{              
	STRING command[5];                    
	MAKESTRING(command,"#R%02d",GetLastModifiedArrayIndex()-1);	 
	Send(command);
}

RELEASE PresetSave{              
	STRING command[5];                    
	MAKESTRING(command,"#M%02d",GetLastModifiedArrayIndex()-1);	 
	Send(command);
}

PUSH POLL{                 
	fnPoll();
}

SOCKETCONNECT ipCamera{ 
	// TRACE("ipCamera Connected"); 
	// TRACE("Sending=%s",Tx);                   
	SocketSend(ipCamera, Tx);   
	WAIT(250, TimeOut){SocketDisconnectClient(ipCamera);}
                 
}

SOCKETRECEIVE ipCamera{ 
	// TRACE("ipCamera Recieve");
	// TRACE("%s",ipCamera.SocketRxBuf);

}
 
SOCKETDISCONNECT ipCamera{
	STRING TEMP[100];
	// TRACE("ipCamera DisConnected");
	TEMP = REMOVE(" ",ipCamera.SocketRxBuf); // Strip HTTP/1.1
	IF(REMOVE(" ",ipCamera.SocketRxBuf) = "200 "){
		PULSE(1,connActive);
	}
	TEMP = REMOVE("\n\n",ipCamera.SocketRxBuf);	// Strip Headers                    
	TRACE("Body: %s",ipCamera.SocketRxBuf);

	CLEARBUFFER(ipCamera.SocketRxBuf);
}

SOCKETSTATUS ipCamera{
	// TRACE("ipCamera Status: %d",ipCamera.SocketStatus);
} 

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

